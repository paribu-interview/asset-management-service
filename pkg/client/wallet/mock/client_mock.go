// Code generated by mockery v2.42.0. DO NOT EDIT.

package walletmock

import (
	context "context"

	entity "github.com/safayildirim/asset-management-service/pkg/client/wallet/entity"
	mock "github.com/stretchr/testify/mock"
)

// MockWalletClient is an autogenerated mock type for the Client type
type MockWalletClient struct {
	mock.Mock
}

type MockWalletClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockWalletClient) EXPECT() *MockWalletClient_Expecter {
	return &MockWalletClient_Expecter{mock: &_m.Mock}
}

// GetWallet provides a mock function with given fields: ctx, id
func (_m *MockWalletClient) GetWallet(ctx context.Context, id uint) (*entity.Wallet, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetWallet")
	}

	var r0 *entity.Wallet
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) (*entity.Wallet, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint) *entity.Wallet); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Wallet)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWalletClient_GetWallet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWallet'
type MockWalletClient_GetWallet_Call struct {
	*mock.Call
}

// GetWallet is a helper method to define mock.On call
//   - ctx context.Context
//   - id uint
func (_e *MockWalletClient_Expecter) GetWallet(ctx interface{}, id interface{}) *MockWalletClient_GetWallet_Call {
	return &MockWalletClient_GetWallet_Call{Call: _e.mock.On("GetWallet", ctx, id)}
}

func (_c *MockWalletClient_GetWallet_Call) Run(run func(ctx context.Context, id uint)) *MockWalletClient_GetWallet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint))
	})
	return _c
}

func (_c *MockWalletClient_GetWallet_Call) Return(_a0 *entity.Wallet, _a1 error) *MockWalletClient_GetWallet_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWalletClient_GetWallet_Call) RunAndReturn(run func(context.Context, uint) (*entity.Wallet, error)) *MockWalletClient_GetWallet_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockWalletClient creates a new instance of MockWalletClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWalletClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWalletClient {
	mock := &MockWalletClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
