// Code generated by mockery v2.42.0. DO NOT EDIT.

package transactionmock

import (
	context "context"

	entity "github.com/safayildirim/asset-management-service/internal/transaction/entity"
	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"
)

// MockTransactionRepository is an autogenerated mock type for the Repository type
type MockTransactionRepository struct {
	mock.Mock
}

type MockTransactionRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTransactionRepository) EXPECT() *MockTransactionRepository_Expecter {
	return &MockTransactionRepository_Expecter{mock: &_m.Mock}
}

// CreateTransaction provides a mock function with given fields: ctx, tx, _a2
func (_m *MockTransactionRepository) CreateTransaction(ctx context.Context, tx *gorm.DB,
	_a2 *entity.Transaction) (*entity.Transaction, error) {
	ret := _m.Called(ctx, tx, _a2)

	if len(ret) == 0 {
		panic("no return value specified for CreateTransaction")
	}

	var r0 *entity.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, *entity.Transaction) (*entity.Transaction, error)); ok {
		return rf(ctx, tx, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, *entity.Transaction) *entity.Transaction); ok {
		r0 = rf(ctx, tx, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gorm.DB, *entity.Transaction) error); ok {
		r1 = rf(ctx, tx, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTransactionRepository_CreateTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTransaction'
type MockTransactionRepository_CreateTransaction_Call struct {
	*mock.Call
}

// CreateTransaction is a helper method to define mock.On call
//   - ctx context.Context
//   - tx *gorm.DB
//   - _a2 *entity.Transaction
func (_e *MockTransactionRepository_Expecter) CreateTransaction(ctx interface{}, tx interface{},
	_a2 interface{}) *MockTransactionRepository_CreateTransaction_Call {
	return &MockTransactionRepository_CreateTransaction_Call{Call: _e.mock.On("CreateTransaction", ctx, tx, _a2)}
}

func (_c *MockTransactionRepository_CreateTransaction_Call) Run(run func(ctx context.Context, tx *gorm.DB,
	_a2 *entity.Transaction)) *MockTransactionRepository_CreateTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*gorm.DB), args[2].(*entity.Transaction))
	})
	return _c
}

func (_c *MockTransactionRepository_CreateTransaction_Call) Return(_a0 *entity.Transaction,
	_a1 error) *MockTransactionRepository_CreateTransaction_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTransactionRepository_CreateTransaction_Call) RunAndReturn(run func(context.Context, *gorm.DB,
	*entity.Transaction) (*entity.Transaction, error)) *MockTransactionRepository_CreateTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteTransaction provides a mock function with given fields: ctx, tx, id
func (_m *MockTransactionRepository) DeleteTransaction(ctx context.Context, tx *gorm.DB, id uint) error {
	ret := _m.Called(ctx, tx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTransaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, uint) error); ok {
		r0 = rf(ctx, tx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTransactionRepository_DeleteTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTransaction'
type MockTransactionRepository_DeleteTransaction_Call struct {
	*mock.Call
}

// DeleteTransaction is a helper method to define mock.On call
//   - ctx context.Context
//   - tx *gorm.DB
//   - id uint
func (_e *MockTransactionRepository_Expecter) DeleteTransaction(ctx interface{}, tx interface{},
	id interface{}) *MockTransactionRepository_DeleteTransaction_Call {
	return &MockTransactionRepository_DeleteTransaction_Call{Call: _e.mock.On("DeleteTransaction", ctx, tx, id)}
}

func (_c *MockTransactionRepository_DeleteTransaction_Call) Run(run func(ctx context.Context, tx *gorm.DB,
	id uint)) *MockTransactionRepository_DeleteTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*gorm.DB), args[2].(uint))
	})
	return _c
}

func (_c *MockTransactionRepository_DeleteTransaction_Call) Return(_a0 error) *MockTransactionRepository_DeleteTransaction_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTransactionRepository_DeleteTransaction_Call) RunAndReturn(run func(context.Context, *gorm.DB,
	uint) error) *MockTransactionRepository_DeleteTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// GetTransactions provides a mock function with given fields: ctx, filters
func (_m *MockTransactionRepository) GetTransactions(ctx context.Context,
	filters entity.Filters) ([]*entity.Transaction, error) {
	ret := _m.Called(ctx, filters)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactions")
	}

	var r0 []*entity.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.Filters) ([]*entity.Transaction, error)); ok {
		return rf(ctx, filters)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.Filters) []*entity.Transaction); ok {
		r0 = rf(ctx, filters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.Filters) error); ok {
		r1 = rf(ctx, filters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTransactionRepository_GetTransactions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTransactions'
type MockTransactionRepository_GetTransactions_Call struct {
	*mock.Call
}

// GetTransactions is a helper method to define mock.On call
//   - ctx context.Context
//   - filters transaction.Filters
func (_e *MockTransactionRepository_Expecter) GetTransactions(ctx interface{},
	filters interface{}) *MockTransactionRepository_GetTransactions_Call {
	return &MockTransactionRepository_GetTransactions_Call{Call: _e.mock.On("GetTransactions", ctx, filters)}
}

func (_c *MockTransactionRepository_GetTransactions_Call) Run(run func(ctx context.Context,
	filters entity.Filters)) *MockTransactionRepository_GetTransactions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.Filters))
	})
	return _c
}

func (_c *MockTransactionRepository_GetTransactions_Call) Return(_a0 []*entity.Transaction,
	_a1 error) *MockTransactionRepository_GetTransactions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTransactionRepository_GetTransactions_Call) RunAndReturn(run func(context.Context,
	entity.Filters) ([]*entity.Transaction, error)) *MockTransactionRepository_GetTransactions_Call {
	_c.Call.Return(run)
	return _c
}

// InTransaction provides a mock function with given fields: ctx, fn
func (_m *MockTransactionRepository) InTransaction(ctx context.Context, fn func(*gorm.DB) error) error {
	ret := _m.Called(ctx, fn)

	if len(ret) == 0 {
		panic("no return value specified for InTransaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, func(*gorm.DB) error) error); ok {
		r0 = rf(ctx, fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTransactionRepository_InTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InTransaction'
type MockTransactionRepository_InTransaction_Call struct {
	*mock.Call
}

// InTransaction is a helper method to define mock.On call
//   - ctx context.Context
//   - fn func(*gorm.DB) error
func (_e *MockTransactionRepository_Expecter) InTransaction(ctx interface{},
	fn interface{}) *MockTransactionRepository_InTransaction_Call {
	return &MockTransactionRepository_InTransaction_Call{Call: _e.mock.On("InTransaction", ctx, fn)}
}

func (_c *MockTransactionRepository_InTransaction_Call) Run(run func(ctx context.Context,
	fn func(*gorm.DB) error)) *MockTransactionRepository_InTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(func(*gorm.DB) error))
	})
	return _c
}

func (_c *MockTransactionRepository_InTransaction_Call) Return(_a0 error) *MockTransactionRepository_InTransaction_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTransactionRepository_InTransaction_Call) RunAndReturn(run func(context.Context,
	func(*gorm.DB) error) error) *MockTransactionRepository_InTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTransaction provides a mock function with given fields: ctx, tx, item
func (_m *MockTransactionRepository) UpdateTransaction(ctx context.Context, tx *gorm.DB,
	item *entity.Transaction) error {
	ret := _m.Called(ctx, tx, item)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTransaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, *entity.Transaction) error); ok {
		r0 = rf(ctx, tx, item)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTransactionRepository_UpdateTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTransaction'
type MockTransactionRepository_UpdateTransaction_Call struct {
	*mock.Call
}

// UpdateTransaction is a helper method to define mock.On call
//   - ctx context.Context
//   - tx *gorm.DB
//   - item *entity.Transaction
func (_e *MockTransactionRepository_Expecter) UpdateTransaction(ctx interface{}, tx interface{},
	item interface{}) *MockTransactionRepository_UpdateTransaction_Call {
	return &MockTransactionRepository_UpdateTransaction_Call{Call: _e.mock.On("UpdateTransaction", ctx, tx, item)}
}

func (_c *MockTransactionRepository_UpdateTransaction_Call) Run(run func(ctx context.Context, tx *gorm.DB,
	item *entity.Transaction)) *MockTransactionRepository_UpdateTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*gorm.DB), args[2].(*entity.Transaction))
	})
	return _c
}

func (_c *MockTransactionRepository_UpdateTransaction_Call) Return(_a0 error) *MockTransactionRepository_UpdateTransaction_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTransactionRepository_UpdateTransaction_Call) RunAndReturn(run func(context.Context, *gorm.DB,
	*entity.Transaction) error) *MockTransactionRepository_UpdateTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTransactionRepository creates a new instance of MockTransactionRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTransactionRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTransactionRepository {
	mock := &MockTransactionRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
