// Code generated by mockery v2.42.0. DO NOT EDIT.

package transactionmock

import (
	context "context"

	entity "github.com/safayildirim/asset-management-service/internal/transaction/entity"
	mock "github.com/stretchr/testify/mock"

	request "github.com/safayildirim/asset-management-service/internal/transaction/request"
)

// MockTransactionService is an autogenerated mock type for the Service type
type MockTransactionService struct {
	mock.Mock
}

type MockTransactionService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTransactionService) EXPECT() *MockTransactionService_Expecter {
	return &MockTransactionService_Expecter{mock: &_m.Mock}
}

// CancelTransaction provides a mock function with given fields: ctx, id
func (_m *MockTransactionService) CancelTransaction(ctx context.Context, id uint) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for CancelTransaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTransactionService_CancelTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CancelTransaction'
type MockTransactionService_CancelTransaction_Call struct {
	*mock.Call
}

// CancelTransaction is a helper method to define mock.On call
//   - ctx context.Context
//   - id uint
func (_e *MockTransactionService_Expecter) CancelTransaction(ctx interface{}, id interface{}) *MockTransactionService_CancelTransaction_Call {
	return &MockTransactionService_CancelTransaction_Call{Call: _e.mock.On("CancelTransaction", ctx, id)}
}

func (_c *MockTransactionService_CancelTransaction_Call) Run(run func(ctx context.Context, id uint)) *MockTransactionService_CancelTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint))
	})
	return _c
}

func (_c *MockTransactionService_CancelTransaction_Call) Return(_a0 error) *MockTransactionService_CancelTransaction_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTransactionService_CancelTransaction_Call) RunAndReturn(run func(context.Context, uint) error) *MockTransactionService_CancelTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// GetTransactions provides a mock function with given fields: ctx, _a1
func (_m *MockTransactionService) GetTransactions(ctx context.Context, _a1 *request.GetTransactionsParams) ([]*entity.Transaction, error) {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactions")
	}

	var r0 []*entity.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *request.GetTransactionsParams) ([]*entity.Transaction, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *request.GetTransactionsParams) []*entity.Transaction); ok {
		r0 = rf(ctx, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *request.GetTransactionsParams) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTransactionService_GetTransactions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTransactions'
type MockTransactionService_GetTransactions_Call struct {
	*mock.Call
}

// GetTransactions is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 *request.GetTransactionsParams
func (_e *MockTransactionService_Expecter) GetTransactions(ctx interface{}, _a1 interface{}) *MockTransactionService_GetTransactions_Call {
	return &MockTransactionService_GetTransactions_Call{Call: _e.mock.On("GetTransactions", ctx, _a1)}
}

func (_c *MockTransactionService_GetTransactions_Call) Run(run func(ctx context.Context, _a1 *request.GetTransactionsParams)) *MockTransactionService_GetTransactions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*request.GetTransactionsParams))
	})
	return _c
}

func (_c *MockTransactionService_GetTransactions_Call) Return(_a0 []*entity.Transaction, _a1 error) *MockTransactionService_GetTransactions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTransactionService_GetTransactions_Call) RunAndReturn(run func(context.Context, *request.GetTransactionsParams) ([]*entity.Transaction, error)) *MockTransactionService_GetTransactions_Call {
	_c.Call.Return(run)
	return _c
}

// ScheduleTransaction provides a mock function with given fields: ctx, _a1
func (_m *MockTransactionService) ScheduleTransaction(ctx context.Context, _a1 *request.ScheduleTransactionRequest) (*entity.Transaction, error) {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ScheduleTransaction")
	}

	var r0 *entity.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *request.ScheduleTransactionRequest) (*entity.Transaction, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *request.ScheduleTransactionRequest) *entity.Transaction); ok {
		r0 = rf(ctx, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *request.ScheduleTransactionRequest) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTransactionService_ScheduleTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ScheduleTransaction'
type MockTransactionService_ScheduleTransaction_Call struct {
	*mock.Call
}

// ScheduleTransaction is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 *request.ScheduleTransactionRequest
func (_e *MockTransactionService_Expecter) ScheduleTransaction(ctx interface{}, _a1 interface{}) *MockTransactionService_ScheduleTransaction_Call {
	return &MockTransactionService_ScheduleTransaction_Call{Call: _e.mock.On("ScheduleTransaction", ctx, _a1)}
}

func (_c *MockTransactionService_ScheduleTransaction_Call) Run(run func(ctx context.Context, _a1 *request.ScheduleTransactionRequest)) *MockTransactionService_ScheduleTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*request.ScheduleTransactionRequest))
	})
	return _c
}

func (_c *MockTransactionService_ScheduleTransaction_Call) Return(_a0 *entity.Transaction, _a1 error) *MockTransactionService_ScheduleTransaction_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTransactionService_ScheduleTransaction_Call) RunAndReturn(run func(context.Context, *request.ScheduleTransactionRequest) (*entity.Transaction, error)) *MockTransactionService_ScheduleTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTransactionService creates a new instance of MockTransactionService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTransactionService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTransactionService {
	mock := &MockTransactionService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
