// Code generated by mockery v2.42.0. DO NOT EDIT.

package mock

import (
	context "context"

	entity "github.com/safayildirim/asset-management-service/internal/asset/entity"

	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"
)

// MockAssetRepository is an autogenerated mock type for the Repository type
type MockAssetRepository struct {
	mock.Mock
}

type MockAssetRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAssetRepository) EXPECT() *MockAssetRepository_Expecter {
	return &MockAssetRepository_Expecter{mock: &_m.Mock}
}

// CreateAsset provides a mock function with given fields: ctx, tx, item
func (_m *MockAssetRepository) CreateAsset(ctx context.Context, tx *gorm.DB, item *entity.Asset) (*entity.Asset,
	error) {
	ret := _m.Called(ctx, tx, item)

	if len(ret) == 0 {
		panic("no return value specified for CreateAsset")
	}

	var r0 *entity.Asset
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, *entity.Asset) (*entity.Asset, error)); ok {
		return rf(ctx, tx, item)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, *entity.Asset) *entity.Asset); ok {
		r0 = rf(ctx, tx, item)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Asset)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gorm.DB, *entity.Asset) error); ok {
		r1 = rf(ctx, tx, item)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAssetRepository_CreateAsset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAsset'
type MockAssetRepository_CreateAsset_Call struct {
	*mock.Call
}

// CreateAsset is a helper method to define mock.On call
//   - ctx context.Context
//   - tx *gorm.DB
//   - item *entity.Asset
func (_e *MockAssetRepository_Expecter) CreateAsset(ctx interface{}, tx interface{},
	item interface{}) *MockAssetRepository_CreateAsset_Call {
	return &MockAssetRepository_CreateAsset_Call{Call: _e.mock.On("CreateAsset", ctx, tx, item)}
}

func (_c *MockAssetRepository_CreateAsset_Call) Run(run func(ctx context.Context, tx *gorm.DB,
	item *entity.Asset)) *MockAssetRepository_CreateAsset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*gorm.DB), args[2].(*entity.Asset))
	})
	return _c
}

func (_c *MockAssetRepository_CreateAsset_Call) Return(_a0 *entity.Asset,
	_a1 error) *MockAssetRepository_CreateAsset_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAssetRepository_CreateAsset_Call) RunAndReturn(run func(context.Context, *gorm.DB,
	*entity.Asset) (*entity.Asset, error)) *MockAssetRepository_CreateAsset_Call {
	_c.Call.Return(run)
	return _c
}

// Deposit provides a mock function with given fields: ctx, tx, _a2
func (_m *MockAssetRepository) Deposit(ctx context.Context, tx *gorm.DB, _a2 *entity.Asset) (*entity.Asset, error) {
	ret := _m.Called(ctx, tx, _a2)

	if len(ret) == 0 {
		panic("no return value specified for Deposit")
	}

	var r0 *entity.Asset
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, *entity.Asset) (*entity.Asset, error)); ok {
		return rf(ctx, tx, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, *entity.Asset) *entity.Asset); ok {
		r0 = rf(ctx, tx, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Asset)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gorm.DB, *entity.Asset) error); ok {
		r1 = rf(ctx, tx, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAssetRepository_Deposit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Deposit'
type MockAssetRepository_Deposit_Call struct {
	*mock.Call
}

// Deposit is a helper method to define mock.On call
//   - ctx context.Context
//   - tx *gorm.DB
//   - _a2 *entity.Asset
func (_e *MockAssetRepository_Expecter) Deposit(ctx interface{}, tx interface{},
	_a2 interface{}) *MockAssetRepository_Deposit_Call {
	return &MockAssetRepository_Deposit_Call{Call: _e.mock.On("Deposit", ctx, tx, _a2)}
}

func (_c *MockAssetRepository_Deposit_Call) Run(run func(ctx context.Context, tx *gorm.DB,
	_a2 *entity.Asset)) *MockAssetRepository_Deposit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*gorm.DB), args[2].(*entity.Asset))
	})
	return _c
}

func (_c *MockAssetRepository_Deposit_Call) Return(_a0 *entity.Asset, _a1 error) *MockAssetRepository_Deposit_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAssetRepository_Deposit_Call) RunAndReturn(run func(context.Context, *gorm.DB,
	*entity.Asset) (*entity.Asset, error)) *MockAssetRepository_Deposit_Call {
	_c.Call.Return(run)
	return _c
}

// GetAsset provides a mock function with given fields: ctx, filters
func (_m *MockAssetRepository) GetAsset(ctx context.Context, filters entity.Filters) ([]*entity.Asset, error) {
	ret := _m.Called(ctx, filters)

	if len(ret) == 0 {
		panic("no return value specified for GetAsset")
	}

	var r0 []*entity.Asset
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.Filters) ([]*entity.Asset, error)); ok {
		return rf(ctx, filters)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.Filters) []*entity.Asset); ok {
		r0 = rf(ctx, filters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Asset)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.Filters) error); ok {
		r1 = rf(ctx, filters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAssetRepository_GetAsset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAsset'
type MockAssetRepository_GetAsset_Call struct {
	*mock.Call
}

// GetAsset is a helper method to define mock.On call
//   - ctx context.Context
//   - filters asset.Filters
func (_e *MockAssetRepository_Expecter) GetAsset(ctx interface{},
	filters interface{}) *MockAssetRepository_GetAsset_Call {
	return &MockAssetRepository_GetAsset_Call{Call: _e.mock.On("GetAsset", ctx, filters)}
}

func (_c *MockAssetRepository_GetAsset_Call) Run(run func(ctx context.Context,
	filters entity.Filters)) *MockAssetRepository_GetAsset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.Filters))
	})
	return _c
}

func (_c *MockAssetRepository_GetAsset_Call) Return(_a0 []*entity.Asset, _a1 error) *MockAssetRepository_GetAsset_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAssetRepository_GetAsset_Call) RunAndReturn(run func(context.Context, entity.Filters) ([]*entity.Asset,
	error)) *MockAssetRepository_GetAsset_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAsset provides a mock function with given fields: ctx, tx, item
func (_m *MockAssetRepository) UpdateAsset(ctx context.Context, tx *gorm.DB, item *entity.Asset) error {
	ret := _m.Called(ctx, tx, item)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAsset")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, *entity.Asset) error); ok {
		r0 = rf(ctx, tx, item)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAssetRepository_UpdateAsset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAsset'
type MockAssetRepository_UpdateAsset_Call struct {
	*mock.Call
}

// UpdateAsset is a helper method to define mock.On call
//   - ctx context.Context
//   - tx *gorm.DB
//   - item *entity.Asset
func (_e *MockAssetRepository_Expecter) UpdateAsset(ctx interface{}, tx interface{},
	item interface{}) *MockAssetRepository_UpdateAsset_Call {
	return &MockAssetRepository_UpdateAsset_Call{Call: _e.mock.On("UpdateAsset", ctx, tx, item)}
}

func (_c *MockAssetRepository_UpdateAsset_Call) Run(run func(ctx context.Context, tx *gorm.DB,
	item *entity.Asset)) *MockAssetRepository_UpdateAsset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*gorm.DB), args[2].(*entity.Asset))
	})
	return _c
}

func (_c *MockAssetRepository_UpdateAsset_Call) Return(_a0 error) *MockAssetRepository_UpdateAsset_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAssetRepository_UpdateAsset_Call) RunAndReturn(run func(context.Context, *gorm.DB,
	*entity.Asset) error) *MockAssetRepository_UpdateAsset_Call {
	_c.Call.Return(run)
	return _c
}

// Withdraw provides a mock function with given fields: ctx, tx, _a2
func (_m *MockAssetRepository) Withdraw(ctx context.Context, tx *gorm.DB, _a2 *entity.Asset) (*entity.Asset, error) {
	ret := _m.Called(ctx, tx, _a2)

	if len(ret) == 0 {
		panic("no return value specified for Withdraw")
	}

	var r0 *entity.Asset
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, *entity.Asset) (*entity.Asset, error)); ok {
		return rf(ctx, tx, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, *entity.Asset) *entity.Asset); ok {
		r0 = rf(ctx, tx, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Asset)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gorm.DB, *entity.Asset) error); ok {
		r1 = rf(ctx, tx, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAssetRepository_Withdraw_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Withdraw'
type MockAssetRepository_Withdraw_Call struct {
	*mock.Call
}

// Withdraw is a helper method to define mock.On call
//   - ctx context.Context
//   - tx *gorm.DB
//   - _a2 *entity.Asset
func (_e *MockAssetRepository_Expecter) Withdraw(ctx interface{}, tx interface{},
	_a2 interface{}) *MockAssetRepository_Withdraw_Call {
	return &MockAssetRepository_Withdraw_Call{Call: _e.mock.On("Withdraw", ctx, tx, _a2)}
}

func (_c *MockAssetRepository_Withdraw_Call) Run(run func(ctx context.Context, tx *gorm.DB,
	_a2 *entity.Asset)) *MockAssetRepository_Withdraw_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*gorm.DB), args[2].(*entity.Asset))
	})
	return _c
}

func (_c *MockAssetRepository_Withdraw_Call) Return(_a0 *entity.Asset, _a1 error) *MockAssetRepository_Withdraw_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAssetRepository_Withdraw_Call) RunAndReturn(run func(context.Context, *gorm.DB,
	*entity.Asset) (*entity.Asset, error)) *MockAssetRepository_Withdraw_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAssetRepository creates a new instance of MockAssetRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAssetRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAssetRepository {
	mock := &MockAssetRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
