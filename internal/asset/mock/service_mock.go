// Code generated by mockery v2.42.0. DO NOT EDIT.

package mock

import (
	context "context"

	entity "github.com/safayildirim/asset-management-service/internal/asset/entity"
	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"

	request "github.com/safayildirim/asset-management-service/internal/asset/request"
)

// MockAssetService is an autogenerated mock type for the Service type
type MockAssetService struct {
	mock.Mock
}

type MockAssetService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAssetService) EXPECT() *MockAssetService_Expecter {
	return &MockAssetService_Expecter{mock: &_m.Mock}
}

// CreateAsset provides a mock function with given fields: ctx, tx, _a2
func (_m *MockAssetService) CreateAsset(ctx context.Context, tx *gorm.DB, _a2 *request.CreateAssetRequest) (*entity.Asset, error) {
	ret := _m.Called(ctx, tx, _a2)

	if len(ret) == 0 {
		panic("no return value specified for CreateAsset")
	}

	var r0 *entity.Asset
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, *request.CreateAssetRequest) (*entity.Asset, error)); ok {
		return rf(ctx, tx, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, *request.CreateAssetRequest) *entity.Asset); ok {
		r0 = rf(ctx, tx, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Asset)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gorm.DB, *request.CreateAssetRequest) error); ok {
		r1 = rf(ctx, tx, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAssetService_CreateAsset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAsset'
type MockAssetService_CreateAsset_Call struct {
	*mock.Call
}

// CreateAsset is a helper method to define mock.On call
//   - ctx context.Context
//   - tx *gorm.DB
//   - _a2 *request.CreateAssetRequest
func (_e *MockAssetService_Expecter) CreateAsset(ctx interface{}, tx interface{}, _a2 interface{}) *MockAssetService_CreateAsset_Call {
	return &MockAssetService_CreateAsset_Call{Call: _e.mock.On("CreateAsset", ctx, tx, _a2)}
}

func (_c *MockAssetService_CreateAsset_Call) Run(run func(ctx context.Context, tx *gorm.DB, _a2 *request.CreateAssetRequest)) *MockAssetService_CreateAsset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*gorm.DB), args[2].(*request.CreateAssetRequest))
	})
	return _c
}

func (_c *MockAssetService_CreateAsset_Call) Return(_a0 *entity.Asset, _a1 error) *MockAssetService_CreateAsset_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAssetService_CreateAsset_Call) RunAndReturn(run func(context.Context, *gorm.DB, *request.CreateAssetRequest) (*entity.Asset, error)) *MockAssetService_CreateAsset_Call {
	_c.Call.Return(run)
	return _c
}

// Deposit provides a mock function with given fields: ctx, tx, _a2
func (_m *MockAssetService) Deposit(ctx context.Context, tx *gorm.DB, _a2 *request.CreateDepositRequest) (*entity.Asset, error) {
	ret := _m.Called(ctx, tx, _a2)

	if len(ret) == 0 {
		panic("no return value specified for Deposit")
	}

	var r0 *entity.Asset
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, *request.CreateDepositRequest) (*entity.Asset, error)); ok {
		return rf(ctx, tx, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, *request.CreateDepositRequest) *entity.Asset); ok {
		r0 = rf(ctx, tx, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Asset)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gorm.DB, *request.CreateDepositRequest) error); ok {
		r1 = rf(ctx, tx, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAssetService_Deposit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Deposit'
type MockAssetService_Deposit_Call struct {
	*mock.Call
}

// Deposit is a helper method to define mock.On call
//   - ctx context.Context
//   - tx *gorm.DB
//   - _a2 *request.CreateDepositRequest
func (_e *MockAssetService_Expecter) Deposit(ctx interface{}, tx interface{}, _a2 interface{}) *MockAssetService_Deposit_Call {
	return &MockAssetService_Deposit_Call{Call: _e.mock.On("Deposit", ctx, tx, _a2)}
}

func (_c *MockAssetService_Deposit_Call) Run(run func(ctx context.Context, tx *gorm.DB, _a2 *request.CreateDepositRequest)) *MockAssetService_Deposit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*gorm.DB), args[2].(*request.CreateDepositRequest))
	})
	return _c
}

func (_c *MockAssetService_Deposit_Call) Return(_a0 *entity.Asset, _a1 error) *MockAssetService_Deposit_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAssetService_Deposit_Call) RunAndReturn(run func(context.Context, *gorm.DB, *request.CreateDepositRequest) (*entity.Asset, error)) *MockAssetService_Deposit_Call {
	_c.Call.Return(run)
	return _c
}

// GetAssets provides a mock function with given fields: ctx, _a1
func (_m *MockAssetService) GetAssets(ctx context.Context, _a1 *request.GetAssetsParams) ([]*entity.Asset, error) {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetAssets")
	}

	var r0 []*entity.Asset
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *request.GetAssetsParams) ([]*entity.Asset, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *request.GetAssetsParams) []*entity.Asset); ok {
		r0 = rf(ctx, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Asset)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *request.GetAssetsParams) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAssetService_GetAssets_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAssets'
type MockAssetService_GetAssets_Call struct {
	*mock.Call
}

// GetAssets is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 *request.GetAssetsParams
func (_e *MockAssetService_Expecter) GetAssets(ctx interface{}, _a1 interface{}) *MockAssetService_GetAssets_Call {
	return &MockAssetService_GetAssets_Call{Call: _e.mock.On("GetAssets", ctx, _a1)}
}

func (_c *MockAssetService_GetAssets_Call) Run(run func(ctx context.Context, _a1 *request.GetAssetsParams)) *MockAssetService_GetAssets_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*request.GetAssetsParams))
	})
	return _c
}

func (_c *MockAssetService_GetAssets_Call) Return(_a0 []*entity.Asset, _a1 error) *MockAssetService_GetAssets_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAssetService_GetAssets_Call) RunAndReturn(run func(context.Context, *request.GetAssetsParams) ([]*entity.Asset, error)) *MockAssetService_GetAssets_Call {
	_c.Call.Return(run)
	return _c
}

// Withdraw provides a mock function with given fields: ctx, tx, _a2
func (_m *MockAssetService) Withdraw(ctx context.Context, tx *gorm.DB, _a2 *request.CreateWithdrawRequest) (*entity.Asset, error) {
	ret := _m.Called(ctx, tx, _a2)

	if len(ret) == 0 {
		panic("no return value specified for Withdraw")
	}

	var r0 *entity.Asset
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, *request.CreateWithdrawRequest) (*entity.Asset, error)); ok {
		return rf(ctx, tx, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, *request.CreateWithdrawRequest) *entity.Asset); ok {
		r0 = rf(ctx, tx, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Asset)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gorm.DB, *request.CreateWithdrawRequest) error); ok {
		r1 = rf(ctx, tx, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAssetService_Withdraw_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Withdraw'
type MockAssetService_Withdraw_Call struct {
	*mock.Call
}

// Withdraw is a helper method to define mock.On call
//   - ctx context.Context
//   - tx *gorm.DB
//   - _a2 *request.CreateWithdrawRequest
func (_e *MockAssetService_Expecter) Withdraw(ctx interface{}, tx interface{}, _a2 interface{}) *MockAssetService_Withdraw_Call {
	return &MockAssetService_Withdraw_Call{Call: _e.mock.On("Withdraw", ctx, tx, _a2)}
}

func (_c *MockAssetService_Withdraw_Call) Run(run func(ctx context.Context, tx *gorm.DB, _a2 *request.CreateWithdrawRequest)) *MockAssetService_Withdraw_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*gorm.DB), args[2].(*request.CreateWithdrawRequest))
	})
	return _c
}

func (_c *MockAssetService_Withdraw_Call) Return(_a0 *entity.Asset, _a1 error) *MockAssetService_Withdraw_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAssetService_Withdraw_Call) RunAndReturn(run func(context.Context, *gorm.DB, *request.CreateWithdrawRequest) (*entity.Asset, error)) *MockAssetService_Withdraw_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAssetService creates a new instance of MockAssetService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAssetService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAssetService {
	mock := &MockAssetService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
